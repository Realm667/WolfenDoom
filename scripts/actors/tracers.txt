class BulletTracer : FastProjectile
{
	Default
	{
		+BLOODSPLATTER
		+NOEXTREMEDEATH
		+SEEKERMISSILE
		+WINDTHRUST
		+THRUGHOST
		Radius 2;
		Height 2;
		Speed 75;
		Decal "BulletChip";
	}

	States
	{
		Spawn:
			TNT1 A 1 BRIGHT A_JumpIfTracerCloser(96,"Whiz");
			TNT1 A 0 {
				A_SpawnItemEx("TracerTrail", 0, 0, 0, vel.x, vel.y, vel.z, 0, SXF_ABSOLUTEVELOCITY); //mxd
			}
			Loop;
		Whiz:
			TNT1 A -1 BRIGHT A_SpawnItemEx("Whizzer");
			Stop;
		Death:
		Crash:
			TNT1 AAA 0 {
				A_SpawnItemEx("TracerSpark", 0, 0, 0, random(-2,2), random(-2,2), random(-2,2), random(0,359)); //T667 improvements
				bWindThrust = false;
			}
			PUFF B 3 BRIGHT LIGHT("BPUFF1") A_PlaySound("ricochet");
			PUFF CD 3 BRIGHT LIGHT("BPUFF1");
			Stop;
		XDeath:
			TNT1 A 1 {
				bWindThrust = false;
				A_PlaySound("hitflesh");
			}
			Stop;
	}

	// Handling so that tracers won't hit actors that have the tracer's origin actor set as their master (or inherit from one that does)
	override bool CanCollideWith(Actor other, bool passive)
	{
		if (target)
		{
			Actor roottarget = target;
			Actor rootmaster = other;

			Actor lasttarget = roottarget;
			Actor lastmaster = rootmaster;

			while (roottarget.master)
			{
				lasttarget = roottarget;
				roottarget = roottarget.master;
				if (lasttarget == roottarget) break;
			}
			while (rootmaster.master)
			{
				lastmaster = rootmaster;
				rootmaster = rootmaster.master;
				if (lastmaster == rootmaster) break;
			}

			if (roottarget && roottarget == rootmaster) { return false; }
		}
		return true;
	}
}

class Whizzer : Actor
{
	States
	{
		Spawn:
			TNT1 A 1 A_PlaySound("whiz");
			Stop;
	}
}

class TracerTrail : Actor
{
	Default
	{
		+BRIGHT
		+CANNOTPUSH
		+DONTSPLASH
		+FORCEXYBILLBOARD
		+MISSILE //mxd
		+NOBLOCKMAP
		+NODAMAGETHRUST
		+NOGRAVITY
		+NOTELEPORT
		Alpha .75;
		Scale .4;
		RenderStyle "Add";
	}
	States
	{
		Spawn:
			PUFF A 1 A_FadeOut(0.3);
			Loop;
	}
}

class TracerSpark : Actor
{
	Default
	{
		+DONTSPLASH
		+FLOORCLIP
		+FORCEXYBILLBOARD
		+MISSILE
		+NOTELEPORT
		+WINDTHRUST
		Health 4;
		Radius 3;
		Height 6;
		Gravity .1;
		Speed .1;
		RenderStyle "Add";
		Scale .3;
		Mass 0;
		BounceType "Doom";
	}

	States
	{
		Spawn:
			PUFF A 1;
			"####" AEFGHI 2 BRIGHT A_SetTranslucent(.8,1);
			"####" J 1 BRIGHT A_SetTranslucent(.8,1);
			"####" K 1 BRIGHT A_SetTranslucent(.7,1);
			"####" K 1 BRIGHT A_SetTranslucent(.6,1);
			"####" K 1 BRIGHT A_SetTranslucent(.5,1);
			"####" K 1 BRIGHT A_SetTranslucent(.4,1);
			"####" K 1 BRIGHT A_SetTranslucent(.3,1);
			"####" K 1 BRIGHT A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
	}
}

class TracerSpark_Longlive : TracerSpark
{

	Default
	{
		+BRIGHT
		Gravity .2;
	}

	States
	{
		Spawn:
			PUFF A 0 NODELAY A_Jump(256, "Fade1", "Fade2", "Fade3", "Fade4");
			Loop;
		Fade1:
			"####" AEFGHI 5 A_SetTranslucent(.8,1);
			"####" J 2 A_SetTranslucent(.8,1);
			"####" K 2 A_SetTranslucent(.7,1);
			"####" K 2 A_SetTranslucent(.6,1);
			"####" K 2 A_SetTranslucent(.5,1);
			"####" K 2 A_SetTranslucent(.4,1);
			"####" K 2 A_SetTranslucent(.3,1);
			"####" K 2 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
		Fade2:
			"####" AEFGHI 6 A_SetTranslucent(.8,1);
			"####" J 3 A_SetTranslucent(.8,1);
			"####" K 3 A_SetTranslucent(.7,1);
			"####" K 3 A_SetTranslucent(.6,1);
			"####" K 3 A_SetTranslucent(.5,1);
			"####" K 3 A_SetTranslucent(.4,1);
			"####" K 3 A_SetTranslucent(.3,1);
			"####" K 3 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
		Fade3:
			"####" AEFGHI 4 A_SetTranslucent(.8,1);
			"####" J 4 A_SetTranslucent(.8,1);
			"####" K 4 A_SetTranslucent(.7,1);
			"####" K 4 A_SetTranslucent(.6,1);
			"####" K 4 A_SetTranslucent(.5,1);
			"####" K 4 A_SetTranslucent(.4,1);
			"####" K 4 A_SetTranslucent(.3,1);
			"####" K 4 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
		Fade4:
			"####" AEFGHI 7 A_SetTranslucent(.8,1);
			"####" J 2 A_SetTranslucent(.8,1);
			"####" K 2 A_SetTranslucent(.7,1);
			"####" K 2 A_SetTranslucent(.6,1);
			"####" K 2 A_SetTranslucent(.5,1);
			"####" K 2 A_SetTranslucent(.4,1);
			"####" K 2 A_SetTranslucent(.3,1);
			"####" K 2 A_SetTranslucent(.2,1);
			"####" K 0 { bWindThrust = False; }
			Stop;
	}
}

class PlayerTracer : BulletTracer
{
	Default
	{
		Species "PlayerFollower"; // By default, player bullets have PlayerFollower species
	}

	override void PostBeginPlay()
	{
		if (target && target is "PlayerFollower" && target.bFriendly) { // If the shooter is a friendly PlayerFollower...
			A_SetSpecies("Player");  // ...they can always shoot through players
			bThruSpecies = True;
		} else if (!multiplayer && skill < 2) { // Otherwise, if it's a regular player, not in coop (or dm, hypothetically), and at lowest two skills...
			bThruSpecies = True; // ...player shots go through PlayerFollower species, as defined in Default block
		}

		Super.PostBeginPlay();
	}
}